// Copyright 2025, Reclaim Protocol. Use of this source code is governed by a license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v26.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

typealias MessagesBinaryMessenger = any FlutterBinaryMessenger

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(
    code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.",
    details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsMessages(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsMessages(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsMessages(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashMessages(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
    for item in valueList { deepHashMessages(value: item, hasher: &hasher) }
    return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys {
      hasher.combine(key)
      deepHashMessages(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

enum ReclaimApiVerificationExceptionType: Int {
  case unknown = 0
  case sessionExpired = 1
  case verificationDismissed = 2
  case verificationFailed = 3
  case verificationCancelled = 4
}

enum ReclaimSessionStatus: Int {
  case uSERSTARTEDVERIFICATION = 0
  case uSERINITVERIFICATION = 1
  case pROOFGENERATIONSTARTED = 2
  case pROOFGENERATIONRETRY = 3
  case pROOFGENERATIONSUCCESS = 4
  case pROOFGENERATIONFAILED = 5
  case pROOFSUBMITTED = 6
  case pROOFSUBMISSIONFAILED = 7
  case pROOFMANUALVERIFICATIONSUBMITTED = 8
  case aIPROOFSUBMITTED = 9
}

enum ClaimCreationTypeApi: Int {
  case standalone = 0
  case meChain = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReclaimApiVerificationRequest: Hashable {
  var appId: String
  var providerId: String
  var secret: String
  var signature: String
  var timestamp: String? = nil
  var context: String
  var sessionId: String
  var parameters: [String: String]
  var providerVersion: ProviderVersionApi? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimApiVerificationRequest? {
    let appId = pigeonVar_list[0] as! String
    let providerId = pigeonVar_list[1] as! String
    let secret = pigeonVar_list[2] as! String
    let signature = pigeonVar_list[3] as! String
    let timestamp: String? = nilOrValue(pigeonVar_list[4])
    let context = pigeonVar_list[5] as! String
    let sessionId = pigeonVar_list[6] as! String
    let parameters = pigeonVar_list[7] as! [String: String]
    let providerVersion: ProviderVersionApi? = nilOrValue(pigeonVar_list[8])

    return ReclaimApiVerificationRequest(
      appId: appId,
      providerId: providerId,
      secret: secret,
      signature: signature,
      timestamp: timestamp,
      context: context,
      sessionId: sessionId,
      parameters: parameters,
      providerVersion: providerVersion
    )
  }
  func toList() -> [Any?] {
    return [
      appId,
      providerId,
      secret,
      signature,
      timestamp,
      context,
      sessionId,
      parameters,
      providerVersion,
    ]
  }
  static func == (lhs: ReclaimApiVerificationRequest, rhs: ReclaimApiVerificationRequest) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReclaimApiVerificationException: Hashable {
  var message: String
  var stackTraceAsString: String
  var type: ReclaimApiVerificationExceptionType

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimApiVerificationException? {
    let message = pigeonVar_list[0] as! String
    let stackTraceAsString = pigeonVar_list[1] as! String
    let type = pigeonVar_list[2] as! ReclaimApiVerificationExceptionType

    return ReclaimApiVerificationException(
      message: message,
      stackTraceAsString: stackTraceAsString,
      type: type
    )
  }
  func toList() -> [Any?] {
    return [
      message,
      stackTraceAsString,
      type,
    ]
  }
  static func == (lhs: ReclaimApiVerificationException, rhs: ReclaimApiVerificationException)
    -> Bool
  {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReclaimApiVerificationResponse: Hashable {
  var sessionId: String
  var didSubmitManualVerification: Bool
  var proofs: [[String: Sendable?]]
  var exception: ReclaimApiVerificationException? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimApiVerificationResponse? {
    let sessionId = pigeonVar_list[0] as! String
    let didSubmitManualVerification = pigeonVar_list[1] as! Bool
    let proofs = pigeonVar_list[2] as! [[String: Sendable?]]
    let exception: ReclaimApiVerificationException? = nilOrValue(pigeonVar_list[3])

    return ReclaimApiVerificationResponse(
      sessionId: sessionId,
      didSubmitManualVerification: didSubmitManualVerification,
      proofs: proofs,
      exception: exception
    )
  }
  func toList() -> [Any?] {
    return [
      sessionId,
      didSubmitManualVerification,
      proofs,
      exception,
    ]
  }
  static func == (lhs: ReclaimApiVerificationResponse, rhs: ReclaimApiVerificationResponse) -> Bool
  {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ClientProviderInformationOverride: Hashable {
  var providerInformationUrl: String? = nil
  var providerInformationJsonString: String? = nil
  var canFetchProviderInformationFromHost: Bool

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClientProviderInformationOverride? {
    let providerInformationUrl: String? = nilOrValue(pigeonVar_list[0])
    let providerInformationJsonString: String? = nilOrValue(pigeonVar_list[1])
    let canFetchProviderInformationFromHost = pigeonVar_list[2] as! Bool

    return ClientProviderInformationOverride(
      providerInformationUrl: providerInformationUrl,
      providerInformationJsonString: providerInformationJsonString,
      canFetchProviderInformationFromHost: canFetchProviderInformationFromHost
    )
  }
  func toList() -> [Any?] {
    return [
      providerInformationUrl,
      providerInformationJsonString,
      canFetchProviderInformationFromHost,
    ]
  }
  static func == (lhs: ClientProviderInformationOverride, rhs: ClientProviderInformationOverride)
    -> Bool
  {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ClientFeatureOverrides: Hashable {
  var cookiePersist: Bool? = nil
  var singleReclaimRequest: Bool? = nil
  var idleTimeThresholdForManualVerificationTrigger: Int64? = nil
  var sessionTimeoutForManualVerificationTrigger: Int64? = nil
  var attestorBrowserRpcUrl: String? = nil
  var isAIFlowEnabled: Bool? = nil
  var manualReviewMessage: String? = nil
  var loginPromptMessage: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClientFeatureOverrides? {
    let cookiePersist: Bool? = nilOrValue(pigeonVar_list[0])
    let singleReclaimRequest: Bool? = nilOrValue(pigeonVar_list[1])
    let idleTimeThresholdForManualVerificationTrigger: Int64? = nilOrValue(pigeonVar_list[2])
    let sessionTimeoutForManualVerificationTrigger: Int64? = nilOrValue(pigeonVar_list[3])
    let attestorBrowserRpcUrl: String? = nilOrValue(pigeonVar_list[4])
    let isAIFlowEnabled: Bool? = nilOrValue(pigeonVar_list[5])
    let manualReviewMessage: String? = nilOrValue(pigeonVar_list[6])
    let loginPromptMessage: String? = nilOrValue(pigeonVar_list[7])

    return ClientFeatureOverrides(
      cookiePersist: cookiePersist,
      singleReclaimRequest: singleReclaimRequest,
      idleTimeThresholdForManualVerificationTrigger: idleTimeThresholdForManualVerificationTrigger,
      sessionTimeoutForManualVerificationTrigger: sessionTimeoutForManualVerificationTrigger,
      attestorBrowserRpcUrl: attestorBrowserRpcUrl,
      isAIFlowEnabled: isAIFlowEnabled,
      manualReviewMessage: manualReviewMessage,
      loginPromptMessage: loginPromptMessage
    )
  }
  func toList() -> [Any?] {
    return [
      cookiePersist,
      singleReclaimRequest,
      idleTimeThresholdForManualVerificationTrigger,
      sessionTimeoutForManualVerificationTrigger,
      attestorBrowserRpcUrl,
      isAIFlowEnabled,
      manualReviewMessage,
      loginPromptMessage,
    ]
  }
  static func == (lhs: ClientFeatureOverrides, rhs: ClientFeatureOverrides) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ClientLogConsumerOverride: Hashable {
  var enableLogHandler: Bool
  var canSdkCollectTelemetry: Bool
  var canSdkPrintLogs: Bool? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClientLogConsumerOverride? {
    let enableLogHandler = pigeonVar_list[0] as! Bool
    let canSdkCollectTelemetry = pigeonVar_list[1] as! Bool
    let canSdkPrintLogs: Bool? = nilOrValue(pigeonVar_list[2])

    return ClientLogConsumerOverride(
      enableLogHandler: enableLogHandler,
      canSdkCollectTelemetry: canSdkCollectTelemetry,
      canSdkPrintLogs: canSdkPrintLogs
    )
  }
  func toList() -> [Any?] {
    return [
      enableLogHandler,
      canSdkCollectTelemetry,
      canSdkPrintLogs,
    ]
  }
  static func == (lhs: ClientLogConsumerOverride, rhs: ClientLogConsumerOverride) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ClientReclaimSessionManagementOverride: Hashable {
  var enableSdkSessionManagement: Bool

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClientReclaimSessionManagementOverride? {
    let enableSdkSessionManagement = pigeonVar_list[0] as! Bool

    return ClientReclaimSessionManagementOverride(
      enableSdkSessionManagement: enableSdkSessionManagement
    )
  }
  func toList() -> [Any?] {
    return [
      enableSdkSessionManagement
    ]
  }
  static func == (
    lhs: ClientReclaimSessionManagementOverride, rhs: ClientReclaimSessionManagementOverride
  ) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ClientReclaimAppInfoOverride: Hashable {
  var appName: String
  var appImageUrl: String
  var isRecurring: Bool

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ClientReclaimAppInfoOverride? {
    let appName = pigeonVar_list[0] as! String
    let appImageUrl = pigeonVar_list[1] as! String
    let isRecurring = pigeonVar_list[2] as! Bool

    return ClientReclaimAppInfoOverride(
      appName: appName,
      appImageUrl: appImageUrl,
      isRecurring: isRecurring
    )
  }
  func toList() -> [Any?] {
    return [
      appName,
      appImageUrl,
      isRecurring,
    ]
  }
  static func == (lhs: ClientReclaimAppInfoOverride, rhs: ClientReclaimAppInfoOverride) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Identification information of a session.
///
/// Generated class from Pigeon that represents data sent in messages.
struct ReclaimSessionIdentityUpdate: Hashable {
  /// The application id.
  var appId: String
  /// The provider id.
  var providerId: String
  /// The session id.
  var sessionId: String

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimSessionIdentityUpdate? {
    let appId = pigeonVar_list[0] as! String
    let providerId = pigeonVar_list[1] as! String
    let sessionId = pigeonVar_list[2] as! String

    return ReclaimSessionIdentityUpdate(
      appId: appId,
      providerId: providerId,
      sessionId: sessionId
    )
  }
  func toList() -> [Any?] {
    return [
      appId,
      providerId,
      sessionId,
    ]
  }
  static func == (lhs: ReclaimSessionIdentityUpdate, rhs: ReclaimSessionIdentityUpdate) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReclaimApiVerificationOptions: Hashable {
  /// Whether to delete cookies before user journey starts in the client web view.
  /// Defaults to true.
  var canDeleteCookiesBeforeVerificationStarts: Bool
  /// Whether module can use a callback to host that returns an authentication request when a Reclaim HTTP provider is provided.
  /// Defaults to false.
  /// {@macro CreateClaimOptions.attestorAuthenticationRequest}
  var canUseAttestorAuthenticationRequest: Bool
  var claimCreationType: ClaimCreationTypeApi
  /// Whether module can auto submit the claim.
  /// Defaults to true.
  var canAutoSubmit: Bool
  /// Whether the close button is visible.
  /// Defaults to true.
  var isCloseButtonVisible: Bool

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ReclaimApiVerificationOptions? {
    let canDeleteCookiesBeforeVerificationStarts = pigeonVar_list[0] as! Bool
    let canUseAttestorAuthenticationRequest = pigeonVar_list[1] as! Bool
    let claimCreationType = pigeonVar_list[2] as! ClaimCreationTypeApi
    let canAutoSubmit = pigeonVar_list[3] as! Bool
    let isCloseButtonVisible = pigeonVar_list[4] as! Bool

    return ReclaimApiVerificationOptions(
      canDeleteCookiesBeforeVerificationStarts: canDeleteCookiesBeforeVerificationStarts,
      canUseAttestorAuthenticationRequest: canUseAttestorAuthenticationRequest,
      claimCreationType: claimCreationType,
      canAutoSubmit: canAutoSubmit,
      isCloseButtonVisible: isCloseButtonVisible
    )
  }
  func toList() -> [Any?] {
    return [
      canDeleteCookiesBeforeVerificationStarts,
      canUseAttestorAuthenticationRequest,
      claimCreationType,
      canAutoSubmit,
      isCloseButtonVisible,
    ]
  }
  static func == (lhs: ReclaimApiVerificationOptions, rhs: ReclaimApiVerificationOptions) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ProviderVersionApi: Hashable {
  var versionExpression: String? = nil
  var resolvedVersion: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ProviderVersionApi? {
    let versionExpression: String? = nilOrValue(pigeonVar_list[0])
    let resolvedVersion: String? = nilOrValue(pigeonVar_list[1])

    return ProviderVersionApi(
      versionExpression: versionExpression,
      resolvedVersion: resolvedVersion
    )
  }
  func toList() -> [Any?] {
    return [
      versionExpression,
      resolvedVersion,
    ]
  }
  static func == (lhs: ProviderVersionApi, rhs: ProviderVersionApi) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct SessionInitResponseApi: Hashable {
  var sessionId: String
  var resolvedProviderVersion: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> SessionInitResponseApi? {
    let sessionId = pigeonVar_list[0] as! String
    let resolvedProviderVersion: String? = nilOrValue(pigeonVar_list[1])

    return SessionInitResponseApi(
      sessionId: sessionId,
      resolvedProviderVersion: resolvedProviderVersion
    )
  }
  func toList() -> [Any?] {
    return [
      sessionId,
      resolvedProviderVersion,
    ]
  }
  static func == (lhs: SessionInitResponseApi, rhs: SessionInitResponseApi) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct LogEntryApi: Hashable {
  var sessionId: String? = nil
  var message: String
  var level: Int64
  var dateTimeIso: String
  var source: String
  var error: String? = nil
  var stackTraceAsString: String? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> LogEntryApi? {
    let sessionId: String? = nilOrValue(pigeonVar_list[0])
    let message = pigeonVar_list[1] as! String
    let level = pigeonVar_list[2] as! Int64
    let dateTimeIso = pigeonVar_list[3] as! String
    let source = pigeonVar_list[4] as! String
    let error: String? = nilOrValue(pigeonVar_list[5])
    let stackTraceAsString: String? = nilOrValue(pigeonVar_list[6])

    return LogEntryApi(
      sessionId: sessionId,
      message: message,
      level: level,
      dateTimeIso: dateTimeIso,
      source: source,
      error: error,
      stackTraceAsString: stackTraceAsString
    )
  }
  func toList() -> [Any?] {
    return [
      sessionId,
      message,
      level,
      dateTimeIso,
      source,
      error,
      stackTraceAsString,
    ]
  }
  static func == (lhs: LogEntryApi, rhs: LogEntryApi) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())
  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ReclaimApiVerificationExceptionType(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ReclaimSessionStatus(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ClaimCreationTypeApi(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      return ReclaimApiVerificationRequest.fromList(self.readValue() as! [Any?])
    case 133:
      return ReclaimApiVerificationException.fromList(self.readValue() as! [Any?])
    case 134:
      return ReclaimApiVerificationResponse.fromList(self.readValue() as! [Any?])
    case 135:
      return ClientProviderInformationOverride.fromList(self.readValue() as! [Any?])
    case 136:
      return ClientFeatureOverrides.fromList(self.readValue() as! [Any?])
    case 137:
      return ClientLogConsumerOverride.fromList(self.readValue() as! [Any?])
    case 138:
      return ClientReclaimSessionManagementOverride.fromList(self.readValue() as! [Any?])
    case 139:
      return ClientReclaimAppInfoOverride.fromList(self.readValue() as! [Any?])
    case 140:
      return ReclaimSessionIdentityUpdate.fromList(self.readValue() as! [Any?])
    case 141:
      return ReclaimApiVerificationOptions.fromList(self.readValue() as! [Any?])
    case 142:
      return ProviderVersionApi.fromList(self.readValue() as! [Any?])
    case 143:
      return SessionInitResponseApi.fromList(self.readValue() as! [Any?])
    case 144:
      return LogEntryApi.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ReclaimApiVerificationExceptionType {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? ReclaimSessionStatus {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? ClaimCreationTypeApi {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? ReclaimApiVerificationRequest {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? ReclaimApiVerificationException {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? ReclaimApiVerificationResponse {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? ClientProviderInformationOverride {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? ClientFeatureOverrides {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? ClientLogConsumerOverride {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? ClientReclaimSessionManagementOverride {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? ClientReclaimAppInfoOverride {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? ReclaimSessionIdentityUpdate {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else if let value = value as? ReclaimApiVerificationOptions {
      super.writeByte(141)
      super.writeValue(value.toList())
    } else if let value = value as? ProviderVersionApi {
      super.writeByte(142)
      super.writeValue(value.toList())
    } else if let value = value as? SessionInitResponseApi {
      super.writeByte(143)
      super.writeValue(value.toList())
    } else if let value = value as? LogEntryApi {
      super.writeByte(144)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}

/// Apis implemented by the Reclaim module for use by the host.
///
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ReclaimModuleApiProtocol {
  func startVerification(
    request requestArg: ReclaimApiVerificationRequest,
    completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void)
  func startVerificationFromUrl(
    url urlArg: String,
    completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void)
  func startVerificationFromJson(
    template templateArg: [AnyHashable?: Sendable?],
    completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void)
  func setOverrides(
    provider providerArg: ClientProviderInformationOverride?,
    feature featureArg: ClientFeatureOverrides?,
    logConsumer logConsumerArg: ClientLogConsumerOverride?,
    sessionManagement sessionManagementArg: ClientReclaimSessionManagementOverride?,
    appInfo appInfoArg: ClientReclaimAppInfoOverride?,
    capabilityAccessToken capabilityAccessTokenArg: String?,
    completion: @escaping (Result<Void, PigeonError>) -> Void)
  func clearAllOverrides(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func setVerificationOptions(
    options optionsArg: ReclaimApiVerificationOptions?,
    completion: @escaping (Result<Void, PigeonError>) -> Void)
  func sendLog(
    entry entryArg: LogEntryApi, completion: @escaping (Result<Bool, PigeonError>) -> Void)
  func setConsoleLogging(
    enabled enabledArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func ping(completion: @escaping (Result<Bool, PigeonError>) -> Void)
}
class ReclaimModuleApi: ReclaimModuleApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: MessagesPigeonCodec {
    return MessagesPigeonCodec.shared
  }
  func startVerification(
    request requestArg: ReclaimApiVerificationRequest,
    completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerification\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requestArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! ReclaimApiVerificationResponse
        completion(.success(result))
      }
    }
  }
  func startVerificationFromUrl(
    url urlArg: String,
    completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerificationFromUrl\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([urlArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! ReclaimApiVerificationResponse
        completion(.success(result))
      }
    }
  }
  func startVerificationFromJson(
    template templateArg: [AnyHashable?: Sendable?],
    completion: @escaping (Result<ReclaimApiVerificationResponse, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.startVerificationFromJson\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([templateArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! ReclaimApiVerificationResponse
        completion(.success(result))
      }
    }
  }
  func setOverrides(
    provider providerArg: ClientProviderInformationOverride?,
    feature featureArg: ClientFeatureOverrides?,
    logConsumer logConsumerArg: ClientLogConsumerOverride?,
    sessionManagement sessionManagementArg: ClientReclaimSessionManagementOverride?,
    appInfo appInfoArg: ClientReclaimAppInfoOverride?,
    capabilityAccessToken capabilityAccessTokenArg: String?,
    completion: @escaping (Result<Void, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.setOverrides\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(
      [
        providerArg, featureArg, logConsumerArg, sessionManagementArg, appInfoArg,
        capabilityAccessTokenArg,
      ] as [Any?]
    ) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func clearAllOverrides(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.clearAllOverrides\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func setVerificationOptions(
    options optionsArg: ReclaimApiVerificationOptions?,
    completion: @escaping (Result<Void, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.setVerificationOptions\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([optionsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func sendLog(
    entry entryArg: LogEntryApi, completion: @escaping (Result<Bool, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.sendLog\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([entryArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! Bool
        completion(.success(result))
      }
    }
  }
  func setConsoleLogging(
    enabled enabledArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void
  ) {
    let channelName: String =
      "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.setConsoleLogging\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([enabledArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func ping(completion: @escaping (Result<Bool, PigeonError>) -> Void) {
    let channelName: String =
      "dev.flutter.pigeon.reclaim_verifier_module.ReclaimModuleApi.ping\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(
      name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else if listResponse[0] == nil {
        completion(
          .failure(
            PigeonError(
              code: "null-error",
              message: "Flutter api returned null value for non-null return value.", details: "")))
      } else {
        let result = listResponse[0] as! Bool
        completion(.success(result))
      }
    }
  }
}
/// Apis implemented by the host using the Reclaim module.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ReclaimHostOverridesApi {
  func onLogs(logJsonString: String, completion: @escaping (Result<Void, Error>) -> Void)
  func createSession(
    appId: String, providerId: String, timestamp: String, signature: String,
    providerVersion: String, completion: @escaping (Result<SessionInitResponseApi, Error>) -> Void)
  func updateSession(
    sessionId: String, status: ReclaimSessionStatus, metadata: [String: Sendable?]?,
    completion: @escaping (Result<Bool, Error>) -> Void)
  func logSession(
    appId: String, providerId: String, sessionId: String, logType: String,
    metadata: [String: Sendable?]?, completion: @escaping (Result<Void, Error>) -> Void)
  func onSessionIdentityUpdate(
    update: ReclaimSessionIdentityUpdate?, completion: @escaping (Result<Void, Error>) -> Void)
  func fetchProviderInformation(
    appId: String, providerId: String, sessionId: String, signature: String, timestamp: String,
    resolvedVersion: String, completion: @escaping (Result<String, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ReclaimHostOverridesApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `ReclaimHostOverridesApi` to handle messages through the `binaryMessenger`.
  static func setUp(
    binaryMessenger: FlutterBinaryMessenger, api: ReclaimHostOverridesApi?,
    messageChannelSuffix: String = ""
  ) {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let onLogsChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.onLogs\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onLogsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let logJsonStringArg = args[0] as! String
        api.onLogs(logJsonString: logJsonStringArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      onLogsChannel.setMessageHandler(nil)
    }
    let createSessionChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.createSession\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createSessionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appIdArg = args[0] as! String
        let providerIdArg = args[1] as! String
        let timestampArg = args[2] as! String
        let signatureArg = args[3] as! String
        let providerVersionArg = args[4] as! String
        api.createSession(
          appId: appIdArg, providerId: providerIdArg, timestamp: timestampArg,
          signature: signatureArg, providerVersion: providerVersionArg
        ) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      createSessionChannel.setMessageHandler(nil)
    }
    let updateSessionChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.updateSession\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateSessionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let sessionIdArg = args[0] as! String
        let statusArg = args[1] as! ReclaimSessionStatus
        let metadataArg: [String: Sendable?]? = nilOrValue(args[2])
        api.updateSession(sessionId: sessionIdArg, status: statusArg, metadata: metadataArg) {
          result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      updateSessionChannel.setMessageHandler(nil)
    }
    let logSessionChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.logSession\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      logSessionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appIdArg = args[0] as! String
        let providerIdArg = args[1] as! String
        let sessionIdArg = args[2] as! String
        let logTypeArg = args[3] as! String
        let metadataArg: [String: Sendable?]? = nilOrValue(args[4])
        api.logSession(
          appId: appIdArg, providerId: providerIdArg, sessionId: sessionIdArg, logType: logTypeArg,
          metadata: metadataArg
        ) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      logSessionChannel.setMessageHandler(nil)
    }
    let onSessionIdentityUpdateChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.onSessionIdentityUpdate\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onSessionIdentityUpdateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let updateArg: ReclaimSessionIdentityUpdate? = nilOrValue(args[0])
        api.onSessionIdentityUpdate(update: updateArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      onSessionIdentityUpdateChannel.setMessageHandler(nil)
    }
    let fetchProviderInformationChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostOverridesApi.fetchProviderInformation\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchProviderInformationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appIdArg = args[0] as! String
        let providerIdArg = args[1] as! String
        let sessionIdArg = args[2] as! String
        let signatureArg = args[3] as! String
        let timestampArg = args[4] as! String
        let resolvedVersionArg = args[5] as! String
        api.fetchProviderInformation(
          appId: appIdArg, providerId: providerIdArg, sessionId: sessionIdArg,
          signature: signatureArg, timestamp: timestampArg, resolvedVersion: resolvedVersionArg
        ) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      fetchProviderInformationChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ReclaimHostVerificationApi {
  func fetchAttestorAuthenticationRequest(
    reclaimHttpProvider: [AnyHashable?: Sendable?],
    completion: @escaping (Result<String, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ReclaimHostVerificationApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `ReclaimHostVerificationApi` to handle messages through the `binaryMessenger`.
  static func setUp(
    binaryMessenger: FlutterBinaryMessenger, api: ReclaimHostVerificationApi?,
    messageChannelSuffix: String = ""
  ) {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let fetchAttestorAuthenticationRequestChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.reclaim_verifier_module.ReclaimHostVerificationApi.fetchAttestorAuthenticationRequest\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchAttestorAuthenticationRequestChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let reclaimHttpProviderArg = args[0] as! [AnyHashable?: Sendable?]
        api.fetchAttestorAuthenticationRequest(reclaimHttpProvider: reclaimHttpProviderArg) {
          result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      fetchAttestorAuthenticationRequestChannel.setMessageHandler(nil)
    }
  }
}
